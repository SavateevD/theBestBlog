@model theBestBlog.WebUI.Models.ListViewModel


@* Read the current page and total pages *@
@{
    var currentPage = ViewContext.RequestContext.HttpContext.Request["p"] != null
      ? int.Parse(ViewContext.RequestContext.HttpContext.Request["p"])
      : 1;

    var totalPages = Math.Ceiling((double)Model.TotalPosts / 5);
}

@* Check do we need to display pagination links *@
@if (currentPage > 1 || currentPage < totalPages)
{
    var p = string.Format("p={0}", currentPage - 1);
    var Old = string.Format("p={0}", currentPage + 1);

    @* If the view is rendered for "search" action append the pagination value with "&" *@

if (ViewContext.RouteData.Values["action"].ToString()
  .Equals("search", StringComparison.OrdinalIgnoreCase))
{
    var s = String.Format("?s={0}", ViewContext.RequestContext.HttpContext.Request.QueryString["s"]);
    p = String.Format("{0}&{1}", s, p);
    Old = String.Format("{0}&{1}", s, Old);
}
else
{
    p = String.Concat("?", p);
    Old = String.Concat("?", Old);
}

  <!--pagination links-->
    @*<div class="pager">

        <a href="@p" title="Previous" class="previous"
           style="visibility:@(currentPage > 1 ? "visible" : "collapse")"><< previous</a>

        <a href="@n" title="Next" class="next"
           style="visibility:@(currentPage < totalPages ? "visible" : "collapse")">next >></a>

    </div>*@

    <ul class="pagination justify-content-center mb-4">
        <li class="page-item @(currentPage < totalPages ? "" : "disabled")">
            <a class="page-link " href="@Old">&larr; Older</a>
        </li>
        <li class="page-item @(currentPage > 1 ? "" : "disabled")">
            <a class="page-link " href="@p">Newer &rarr;</a>
        </li>
    </ul>
}
